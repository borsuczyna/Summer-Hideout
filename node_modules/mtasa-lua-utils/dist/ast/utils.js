"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLocalImport = exports.getImportNodeModuleFile = exports.getResourceDirectoryName = exports.getFileSide = exports.isRelativeImport = exports.getGlobalsTableName = exports.getExportsTableName = exports.prepareOneToManyVisitorResult = void 0;
const lua_ast_1 = require("typescript-to-lua/dist/transformation/utils/lua-ast");
const path_1 = __importDefault(require("path"));
function prepareOneToManyVisitorResult(rawResult) {
    if (rawResult === undefined) {
        return [];
    }
    if (Array.isArray(rawResult)) {
        return rawResult;
    }
    return [rawResult];
}
exports.prepareOneToManyVisitorResult = prepareOneToManyVisitorResult;
function getExportsTableName() {
    return (0, lua_ast_1.createExportsIdentifier)().text;
}
exports.getExportsTableName = getExportsTableName;
function getGlobalsTableName() {
    return '_G';
}
exports.getGlobalsTableName = getGlobalsTableName;
function isRelativeImport(moduleName) {
    return moduleName.startsWith('../') || moduleName.startsWith('./');
}
exports.isRelativeImport = isRelativeImport;
function getFileSide(filepath, context) {
    var _a, _b, _c;
    const options = context.options;
    const rootDir = (_a = options.originalRootDir) !== null && _a !== void 0 ? _a : '.';
    const scripts = (_c = (_b = options.resourceSpecific) === null || _b === void 0 ? void 0 : _b.scripts) === null || _c === void 0 ? void 0 : _c.filter(script => {
        var _a, _b;
        return path_1.default.join(rootDir, (_b = (_a = options.resourceSpecific) === null || _a === void 0 ? void 0 : _a.compilerConfig.srcDir) !== null && _b !== void 0 ? _b : '', script.src) === path_1.default.join(filepath);
    });
    if (scripts === undefined || scripts.length === 0) {
        return undefined;
    }
    return scripts[0].type;
}
exports.getFileSide = getFileSide;
function getResourceDirectoryName(resourceMeta) {
    return path_1.default.basename(resourceMeta.compilerConfig.srcDir);
}
exports.getResourceDirectoryName = getResourceDirectoryName;
function getImportNodeModuleFile(importNode, context) {
    return context.resolver.getExternalModuleFileFromDeclaration(importNode);
}
exports.getImportNodeModuleFile = getImportNodeModuleFile;
function isLocalImport(importNode, context) {
    var _a;
    const rootPath = path_1.default.resolve((_a = context.options.rootDir) !== null && _a !== void 0 ? _a : '.');
    const modulePath = path_1.default.resolve(getImportNodeModuleFile(importNode, context).fileName);
    return modulePath.startsWith(rootPath);
}
exports.isLocalImport = isLocalImport;
//# sourceMappingURL=utils.js.map