"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts = __importStar(require("typescript"));
const typescript_to_lua_1 = require("typescript-to-lua");
const utils_1 = require("./utils");
function statementListAntiExport(statements) {
    const result = (0, utils_1.prepareOneToManyVisitorResult)(statements);
    for (const statement of result) {
        if (statement.kind !== typescript_to_lua_1.SyntaxKind.AssignmentStatement) {
            continue;
        }
        const declaration = statement;
        const left = declaration.left;
        if (left[0].kind !== typescript_to_lua_1.SyntaxKind.TableIndexExpression) {
            continue;
        }
        const expression = left[0];
        if (expression.table.kind !== typescript_to_lua_1.SyntaxKind.Identifier) {
            continue;
        }
        const tableIdentifier = expression.table;
        if (tableIdentifier.text !== (0, utils_1.getExportsTableName)()) {
            continue;
        }
        tableIdentifier.text = (0, utils_1.getGlobalsTableName)();
    }
    return result;
}
const functionDeclarationAntiExport = function (node, context) {
    const rawResult = context.superTransformStatements(node);
    return statementListAntiExport(rawResult);
};
const variableStatementAntiExport = function (node, context) {
    const rawResult = context.superTransformStatements(node);
    return statementListAntiExport(rawResult);
};
const classDeclarationAntiExport = function (node, context) {
    const rawResult = context.superTransformStatements(node);
    return statementListAntiExport(rawResult);
};
exports.default = {
    visitors: {
        [ts.SyntaxKind.FunctionDeclaration]: functionDeclarationAntiExport,
        [ts.SyntaxKind.VariableStatement]: variableStatementAntiExport,
        [ts.SyntaxKind.ClassDeclaration]: classDeclarationAntiExport,
    },
};
//# sourceMappingURL=removeInlinedExport.js.map