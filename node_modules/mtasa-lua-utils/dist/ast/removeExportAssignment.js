"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts = __importStar(require("typescript"));
const typescript_1 = require("typescript");
const utils_1 = require("../compiler/utils");
const export_1 = require("typescript-to-lua/dist/transformation/visitors/modules/export");
const removeExportAssignment = function (node, context) {
    context.diagnostics.push((0, utils_1.simpleTsDiagnostic)(`Do not use export assignments (file: ${context.sourceFile.fileName})`, typescript_1.DiagnosticCategory.Warning));
    return (0, export_1.transformExportAssignment)(node, context);
};
exports.default = {
    visitors: {
        [ts.SyntaxKind.ExportAssignment]: removeExportAssignment,
    },
};
//# sourceMappingURL=removeExportAssignment.js.map