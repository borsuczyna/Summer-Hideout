"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts = __importStar(require("typescript"));
const path = __importStar(require("path"));
const utils_1 = require("../compiler/utils");
const utils_2 = require("./utils");
const checkImportsSide = function (node, context) {
    const moduleSpecifier = node.moduleSpecifier;
    if (moduleSpecifier.kind !== ts.SyntaxKind.StringLiteral) {
        return context.superTransformStatements(node);
    }
    const module = moduleSpecifier;
    const moduleName = module.text;
    const currentFileType = (0, utils_2.getFileSide)(context.sourceFile.fileName, context);
    if (!currentFileType) {
        console.log(`Unable to determine file side: ${context.sourceFile.fileName}`);
        return context.superTransformStatements(node);
    }
    if ((0, utils_2.isRelativeImport)(moduleName)) {
        let importedFileType = (0, utils_2.getFileSide)(path.join(path.dirname(context.sourceFile.fileName), moduleName + '.ts'), context);
        if (!importedFileType || importedFileType === 'shared') {
            importedFileType = currentFileType;
        }
        if (importedFileType !== currentFileType) {
            context.diagnostics.push((0, utils_1.simpleTsDiagnostic)(`Do not use ${importedFileType}-side imports in ${currentFileType}-side script ` +
                `\n(file: ${context.sourceFile.fileName})`, ts.DiagnosticCategory.Warning));
            return context.superTransformStatements(node);
        }
    }
    else {
        // Check mtasa-lua-types side
        if (moduleName.startsWith('mtasa-lua-types')) {
            if (currentFileType === 'client' &&
                moduleName.indexOf('server') !== -1) {
                context.diagnostics.push((0, utils_1.simpleTsDiagnostic)(`Do not use server-side imports in client-side script ` +
                    `\n(file: ${context.sourceFile.fileName})`, ts.DiagnosticCategory.Warning));
                return context.superTransformStatements(node);
            }
            if (currentFileType === 'server' &&
                moduleName.indexOf('client') !== -1) {
                context.diagnostics.push((0, utils_1.simpleTsDiagnostic)(`Do not use client-side imports in server-side script ` +
                    `\n(file: ${context.sourceFile.fileName})`, ts.DiagnosticCategory.Warning));
                return context.superTransformStatements(node);
            }
            // if (currentFileType === 'shared' &&
            //     (moduleName.indexOf('client') !== -1 ||
            //         moduleName.indexOf('server') !== -1)) {
            //     context.diagnostics.push((0, utils_1.simpleTsDiagnostic)(`Do not use client-side or server-side imports in shared-side script ` +
            //         `\n(file: ${context.sourceFile.fileName})`, ts.DiagnosticCategory.Warning));
            //     return context.superTransformStatements(node);
            // }
        }
    }
    return context.superTransformStatements(node);
};
exports.default = {
    visitors: {
        [ts.SyntaxKind.ImportDeclaration]: checkImportsSide,
    },
};
//# sourceMappingURL=validateImports.js.map