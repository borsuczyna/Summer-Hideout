"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMtasaMetaPath = exports.parseCommandLine = exports.appendCommandLineOptionDeclarations = void 0;
const tstl = __importStar(require("typescript-to-lua"));
const parse_1 = require("typescript-to-lua/dist/cli/parse");
function appendCommandLineOptionDeclarations() {
    parse_1.optionDeclarations.push({
        name: 'meta',
        type: 'string',
        description: 'Custom mtasa-meta.yml file path',
    });
}
exports.appendCommandLineOptionDeclarations = appendCommandLineOptionDeclarations;
function parseCommandLine(args) {
    return tstl.parseCommandLine(args);
}
exports.parseCommandLine = parseCommandLine;
function getMtasaMetaPath(options) {
    var _a;
    return (_a = options.meta) !== null && _a !== void 0 ? _a : 'mtasa-meta.yml';
}
exports.getMtasaMetaPath = getMtasaMetaPath;
//# sourceMappingURL=cli.js.map