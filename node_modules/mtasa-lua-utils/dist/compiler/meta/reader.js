"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readMeta = exports.validateMeta = void 0;
const fs_1 = __importDefault(require("fs"));
const yaml = __importStar(require("js-yaml"));
const jsonschema_1 = require("jsonschema");
const JSON5 = __importStar(require("json5"));
const path_1 = __importDefault(require("path"));
class MetaReaderError extends Error {
}
function validateMeta(data) {
    const schemaPath = path_1.default.resolve(__dirname, '../../../mtasa-meta.schema.json');
    const schemaContent = fs_1.default.readFileSync(schemaPath, 'utf8');
    const schema = JSON5.parse(schemaContent);
    const validator = new jsonschema_1.Validator();
    return validator.validate(data, schema, {
        throwError: false,
    });
}
exports.validateMeta = validateMeta;
function readMeta(filepath) {
    const content = fs_1.default.readFileSync(filepath, 'utf8');
    const metaArray = yaml.loadAll(content);
    for (let i = 0; i < metaArray.length; ++i) {
        const meta = metaArray[i];
        const validationResult = validateMeta(meta);
        if (validationResult.errors.length > 0) {
            console.log(`Error happen while validating "${filepath}". In part: ${i}`);
            throw new MetaReaderError(validationResult.toString());
        }
    }
    return metaArray;
}
exports.readMeta = readMeta;
//# sourceMappingURL=reader.js.map