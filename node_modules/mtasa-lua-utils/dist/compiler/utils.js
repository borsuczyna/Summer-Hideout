"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEmptyTsFilePath = exports.extendOptions = exports.showDiagnosticAndExit = exports.simpleTsDiagnostic = exports.getResourceData = exports.getResourceVerboseName = exports.getScriptsFromMeta = void 0;
const utils_1 = require("typescript-to-lua/dist/utils");
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
function getScriptsFromMeta(metaData) {
    const result = {
        client: [],
        server: [],
    };
    if (!metaData.scripts) {
        return result;
    }
    for (const script of metaData.scripts) {
        if (script.type === 'shared') {
            result.client.push(script);
            result.server.push(script);
            continue;
        }
        result[script.type].push(script);
    }
    return result;
}
exports.getScriptsFromMeta = getScriptsFromMeta;
function getResourceVerboseName(resourceMeta) {
    if (resourceMeta.info.name) {
        return resourceMeta.info.name;
    }
    return path_1.default.basename(resourceMeta.compilerConfig.srcDir);
}
exports.getResourceVerboseName = getResourceVerboseName;
function getResourceData(options, resourceMeta) {
    var _a, _b;
    return {
        verboseName: getResourceVerboseName(resourceMeta),
        rootDir: (0, utils_1.normalizeSlashes)(path_1.default.join((_a = options.rootDir) !== null && _a !== void 0 ? _a : '.', resourceMeta.compilerConfig.srcDir)),
        outDir: (0, utils_1.normalizeSlashes)(path_1.default.join((_b = options.outDir) !== null && _b !== void 0 ? _b : '.', resourceMeta.compilerConfig.srcDir)),
    };
}
exports.getResourceData = getResourceData;
function simpleTsDiagnostic(message, category) {
    return {
        messageText: message,
        code: 10000,
        category: category,
        file: undefined,
        length: undefined,
        start: undefined,
    };
}
exports.simpleTsDiagnostic = simpleTsDiagnostic;
function showDiagnosticAndExit(diagnosticResults, reportDiagnostic) {
    if (diagnosticResults.length !== 0) {
        for (const diagnostic of diagnosticResults) {
            reportDiagnostic(diagnostic);
        }
        return typescript_1.default.sys.exit(typescript_1.default.ExitStatus.DiagnosticsPresent_OutputsSkipped);
    }
}
exports.showDiagnosticAndExit = showDiagnosticAndExit;
function extendOptions(options, meta, data) {
    return Object.assign(Object.assign({}, options), { resourceSpecific: Object.assign({}, meta), originalRootDir: options.rootDir, rootDir: path_1.default.dirname(data.rootDir), outDir: path_1.default.dirname(data.outDir) });
}
exports.extendOptions = extendOptions;
function getEmptyTsFilePath() {
    return (0, utils_1.normalizeSlashes)(path_1.default.join(__dirname, '../../src/compiler/empty.ts'));
}
exports.getEmptyTsFilePath = getEmptyTsFilePath;
//# sourceMappingURL=utils.js.map