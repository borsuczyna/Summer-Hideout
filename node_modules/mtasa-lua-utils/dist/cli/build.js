"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildProject = void 0;
const typescript_to_lua_1 = require("typescript-to-lua");
const typescript_1 = __importDefault(require("typescript"));
const cli_1 = require("../compiler/cli");
const reader_1 = require("../compiler/meta/reader");
const tsconfig_1 = require("typescript-to-lua/dist/cli/tsconfig");
const compile_1 = require("../compiler/compile");
const reportDiagnostic = (0, typescript_to_lua_1.createDiagnosticReporter)(false);
(0, cli_1.appendCommandLineOptionDeclarations)();
function printHelp() {
    const spacer = '                             ';
    console.log('\x1b[0mUsage: \x1b[35mmtasa-lua-utils \x1b[1mbuild ' +
        '\x1b[0m[\x1b[34m--help\x1b[0m]\n' +
        spacer +
        '\x1b[0m[\x1b[34m--meta \x1b[1;34mmtasa-meta.yml\x1b[0m]\n' +
        spacer +
        '\x1b[0m[\x1b[34m--project \x1b[1;34mtsconfig.json\x1b[0m]\n' +
        spacer +
        '\x1b[0m[\x1b[34m--tstlVerbose \x1b[1;34mfalse\x1b[0m]\n' +
        '\x1b[0m\n' +
        'Arguments:\n' +
        '    \x1b[34m--help\x1b[0m                    Reveals help message\n' +
        '    \x1b[34m--meta        \x1b[1;34m<string>\x1b[0m    Specify path to mtasa-meta.yml file\n' +
        '    \x1b[34m--project     \x1b[1;34m<string>\x1b[0m    Specify path to tsconfig.json file\n' +
        '    \x1b[34m--tstlVerbose \x1b[1;34m<boolean>\x1b[0m   Provide verbose output useful for diagnosing problems\n');
}
function buildProject(args) {
    const parsed = (0, cli_1.parseCommandLine)(args);
    if (parsed.errors.length > 0) {
        for (const error of parsed.errors) {
            reportDiagnostic(error);
        }
        typescript_1.default.sys.exit(typescript_1.default.ExitStatus.DiagnosticsPresent_OutputsSkipped);
    }
    if (parsed.options.help) {
        printHelp();
        typescript_1.default.sys.exit(0);
    }
    const configFileName = (0, tsconfig_1.locateConfigFile)(parsed);
    if (typeof configFileName === 'object') {
        reportDiagnostic(configFileName);
        typescript_1.default.sys.exit(typescript_1.default.ExitStatus.DiagnosticsPresent_OutputsSkipped);
    }
    const configParseResult = (0, typescript_to_lua_1.parseConfigFileWithSystem)(configFileName);
    const compilerOptions = Object.assign(Object.assign({}, configParseResult.options), parsed.options);
    const metaData = (0, reader_1.readMeta)((0, cli_1.getMtasaMetaPath)(compilerOptions));
    (0, compile_1.executeCompilerForAllResources)(compilerOptions, metaData);
}
exports.buildProject = buildProject;
//# sourceMappingURL=build.js.map