"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newProjectEntrypoint = exports.newProject = exports.camelToKebabCase = exports.getBoilerplateUrl = void 0;
const enquirer_1 = __importDefault(require("enquirer"));
const fs = __importStar(require("fs"));
const unzip = __importStar(require("unzipper"));
const https = __importStar(require("https"));
const path = __importStar(require("path"));
const typescript_1 = __importDefault(require("typescript"));
const child_process = __importStar(require("child_process"));
const utils_1 = require("./utils");
function parseOptions(args) {
    const options = {
        branch: 'master',
        help: false,
    };
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if (arg === '--help' || arg === '?' || arg === '-h') {
            options.help = true;
            break;
        }
        if (arg === '--branch') {
            if (i + 1 >= args.length) {
                console.error('Expected usage: \x1b[34m--branch \x1b[1;34mbranchName\x1b[0m\n' +
                    '    Use \x1b[34m--help \x1b[0mto get more information');
                typescript_1.default.sys.exit(1);
            }
            options.branch = args[i + 1];
            ++i;
            continue;
        }
        console.error(`Unexpected argument: ${arg}.\n` +
            `Use \x1b[34m--help \x1b[0mto get available arguments`);
        typescript_1.default.sys.exit(1);
    }
    return options;
}
function printHelp() {
    const spacer = '                                    ';
    console.log('\x1b[0mUsage: \x1b[35mmtasa-lua-utils \x1b[1mnew-resource ' +
        '\x1b[0m[\x1b[34m--help\x1b[0m]\n' +
        spacer +
        '\x1b[0m[\x1b[34m--branch \x1b[1;34mmaster\x1b[0m] ' +
        '\x1b[0m\n' +
        '\x1b[0m\n' +
        'Arguments:\n' +
        '    \x1b[34m--help\x1b[0m              Reveals help message\n' +
        '    \x1b[34m--branch \x1b[1;34m<string>\x1b[0m   Download boilerplate from specified branch\n' +
        '      List of branches: \x1b[34mhttps://github.com/mtasa-typescript/resource-boilerplate/branches\x1b[0m');
}
function validateDirectory(directory) {
    return !fs.existsSync(directory);
}
function promptAfterValidation(options, directory) {
    let warning = '';
    if (options.warnDirectoryIsNotEmpty) {
        warning +=
            'Execute this script inside an empty directory.\n' +
                `  Directory \x1b[34m${directory}\x1b[0m \x1b[1malready exists\x1b[0m.\n`;
    }
    return enquirer_1.default.prompt([
        ...(warning
            ? [
                {
                    type: 'toggle',
                    name: 'continue',
                    message: warning +
                        '\n\x1b[31m⛊\x1b[0m\x1b[1m Are you sure you want to continue?',
                    initial: false,
                    result(result) {
                        if (!result) {
                            console.log('Exiting...');
                            typescript_1.default.sys.exit(1);
                        }
                        return result;
                    },
                },
            ]
            : []),
    ]);
}
// See https://github.com/enquirer/enquirer/issues/370
function getPromptFeatureMultiSelect() {
    const indicator = function (_, choice) {
        return choice.enabled ? '▶ ' : '> ';
    };
    const spacer = '\n   ';
    return {
        type: 'multiselect',
        name: 'features',
        initial: [0, 3],
        message: '\x1b[0m\x1b[1mSelect features you would like to use in your project\x1b[0m\n' +
            '\x1b[36m>\x1b[0m Use \x1b[34mSpace\x1b[0m to select feature ' +
            'and \x1b[34mEnter\x1b[0m to confirm\x1b[0m',
        choices: [
            {
                name: '\x1b[1mVS Code configuration\x1b[0m',
                value: "vscode" /* VSCODE */,
                hint: spacer + 'Select, if you are going to use VS Code\x1b[0m',
                indicator: indicator,
            },
            {
                name: '\x1b[1mWebStorm configuration\x1b[0m',
                value: "webstorm" /* WEB_STORM */,
                hint: spacer +
                    'Select, if you are going to use JetBrains WebStorm\x1b[0m',
                indicator: indicator,
            },
            {
                name: '\x1b[1mGitHub configuration\x1b[0m',
                value: "github" /* GITHUB */,
                hint: spacer +
                    'Select, if you are going to create ' +
                    'open-source project and use GitHub\x1b[0m',
                indicator: indicator,
            },
            {
                name: '\x1b[1mExample Resource\x1b[0m',
                value: "example" /* EXAMPLE_RESOURCE */,
                hint: spacer +
                    'Select, if you would like the example resource ' +
                    'to appear in the project\x1b[0m',
                indicator: indicator,
            },
        ],
    };
}
function promptData() {
    const context = {};
    return enquirer_1.default.prompt([
        {
            type: 'input',
            name: 'projectName',
            message: 'Enter the project name:',
            validate(value) {
                return !!value;
            },
            result(value) {
                context.projectName = value;
                return value;
            },
        },
        {
            type: 'toggle',
            name: 'putProjectNameInSquareBrackets',
            message: () => `If the name is in square brackets (like, \x1b[34m[${context.projectName}]\x1b[0m), ` +
                'MTASA will correctly determine compiled resource\n' +
                '\x1b[36m>\x1b[0m\x1b[1m Would you like to put your project name into square brackets?',
            initial: true,
            result(value) {
                // See https://github.com/enquirer/enquirer/issues/370
                context.putProjectNameInSquareBrackets =
                    value;
                return value;
            },
        },
        Object.assign(Object.assign({}, getPromptFeatureMultiSelect()), { result(value) {
                const mapped = Object.values(this.map(value));
                context.features = mapped;
                return mapped;
            } }),
        {
            type: 'toggle',
            name: 'continue',
            prefix: '⚒',
            message: () => {
                var _a, _b;
                return `Directory will be created \x1b[34m${path.resolve(getProjectName({
                    projectName: (_a = context.projectName) !== null && _a !== void 0 ? _a : 'undefined',
                    putProjectNameInSquareBrackets: (_b = context.putProjectNameInSquareBrackets) !== null && _b !== void 0 ? _b : true,
                }))}` +
                    '\x1b[0m\n' +
                    '\x1b[36m⚒\x1b[0m Command \x1b[34mnpm install -D\x1b[0m ' +
                    'will be called inside the directory ' +
                    'to initialize the project' +
                    '\x1b[0m\n' +
                    '\x1b[36m⚒\x1b[0m \x1b[1mConfirm?\x1b[0m';
            },
            initial: true,
            result(result) {
                if (!result) {
                    console.log('Exiting...');
                    typescript_1.default.sys.exit(1);
                }
                return result;
            },
        },
    ]);
}
function getBoilerplateUrl(branch) {
    return `https://codeload.github.com/mtasa-typescript/resource-boilerplate/zip/refs/heads/${branch}`;
}
exports.getBoilerplateUrl = getBoilerplateUrl;
function downloadBoilerplate(directory, branch) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('\x1b[36m♢\x1b[0m Downloading boilerplate');
        const downloadDir = fs.mkdtempSync('mtasa-resource-boilerplate', 'utf8');
        yield new Promise((resolve, reject) => {
            const url = getBoilerplateUrl(branch);
            const request = https.get(url, {}, function (response) {
                if (response.statusCode !== 200) {
                    reject('\x1b[31m⛊\x1b[0m Check your internet connecting and specified branch\n' +
                        `\x1b[31m⛊\x1b[0m Also, try to open this URL manually: ${url}\n` +
                        `\x1b[31m⛊\x1b[0m Response status code: \x1b[1;31m${response.statusCode}\x1b[0m`);
                }
                const unzipPipe = response.pipe(unzip.Extract({ path: downloadDir }));
                unzipPipe.on('error', err => {
                    console.error('\x1b[31m⛊\x1b[0m ' +
                        '\x1b[31mError happen while unzipping\x1b[0m');
                    reject(err);
                });
                unzipPipe.on('close', () => {
                    console.log('\x1b[32m♦\x1b[0m Download complete\x1b[0m');
                    resolve();
                });
            });
            request.on('error', err => {
                console.error('\x1b[31m⛊\x1b[0m ' +
                    '\x1b[31mError happen while performing request\x1b[0m');
                reject(err);
            });
        }).catch(error => {
            console.error('\x1b[31m⛊\x1b[0m ' +
                '\x1b[31mError happen while downloading boilerplate:\x1b[0m\n' +
                error);
            (0, utils_1.deleteFolderSyncRecursive)(downloadDir);
            typescript_1.default.sys.exit(1);
        });
        console.log('\x1b[32m♦\x1b[0m The boilerplate unpacked successfully\x1b[0m');
        fs.renameSync(path.join(downloadDir, `resource-boilerplate-${branch}`), directory);
        (0, utils_1.deleteFolderSyncRecursive)(downloadDir);
        console.log(`\x1b[32m♦\x1b[0m Filled the directory ` +
            `\x1b[34m${directory}\x1b[0m`);
    });
}
function getProjectName(options) {
    return options.putProjectNameInSquareBrackets
        ? `[${options.projectName}]`
        : options.projectName;
}
function getEnvironmentData(rootDirectory, options) {
    const projectName = getProjectName(options);
    const directory = path.join(rootDirectory, projectName);
    return {
        projectName,
        directory,
    };
}
function camelToKebabCase(str) {
    if (!str) {
        return '';
    }
    str = str[0].toLowerCase() + str.slice(1);
    return str.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);
}
exports.camelToKebabCase = camelToKebabCase;
const updatePackageJson = function (directory, options) {
    let text = fs.readFileSync(path.join(directory, 'package.json'), 'utf8');
    text = text.replace(/"name": +"[^"]+"/g, `"name": "${camelToKebabCase(options.projectName)}"`);
    fs.writeFileSync(path.join(directory, 'package.json'), text, 'utf8');
};
const setFeatures = function (directory, options) {
    console.log(`\x1b[36m♢\x1b[0m Setting up features\x1b[0m`);
    const features = options.features;
    if (!features.includes("vscode" /* VSCODE */)) {
        (0, utils_1.deleteFolderSyncRecursive)(path.join(directory, '.vscode'));
        console.log(`\x1b[32m♦\x1b[0m Removed VSCode feature\x1b[0m`);
    }
    if (!features.includes("webstorm" /* WEB_STORM */)) {
        (0, utils_1.deleteFolderSyncRecursive)(path.join(directory, '.idea'));
        console.log(`\x1b[32m♦\x1b[0m Removed WebStorm feature\x1b[0m`);
    }
    if (!features.includes("github" /* GITHUB */)) {
        (0, utils_1.deleteFolderSyncRecursive)(path.join(directory, '.github'));
        console.log(`\x1b[32m♦\x1b[0m Removed GitHub feature\x1b[0m`);
    }
    if (!features.includes("example" /* EXAMPLE_RESOURCE */)) {
        (0, utils_1.deleteFolderSyncRecursive)(path.join(directory, 'src/TypeScriptResource'));
        fs.rmSync(path.join(directory, 'mtasa-meta.yml'));
        fs.writeFileSync(path.join(directory, 'mtasa-meta.yml'), '', 'utf8');
        console.log(`\x1b[32m♦\x1b[0m Removed Example Resource\x1b[0m`);
    }
    console.log(`\x1b[32m♦\x1b[0m Features setup complete\x1b[0m`);
};
const execInit = function (directory, options) {
    console.log(`\x1b[36m♢\x1b[0m Downloading Node Modules\x1b[0m`);
    child_process.execSync('npm install -D', {
        cwd: directory,
        stdio: ['inherit', 'inherit', 'inherit'],
    });
    console.log(`\x1b[32m♦\x1b[0m Node Modules prepared\x1b[0m`);
};
const showSuccessMessage = function (directory, options) {
    console.log('\n\x1b[36m>\x1b[0m ' +
        `Project \x1b[34m${options.projectName}\x1b[0m ` +
        'has been created.\x1b[0m' +
        '\n  \x1b[34m' +
        directory +
        '\x1b[0m\n\n' +
        '\x1b[36m>\x1b[0m ' +
        'Use \x1b[34mnpm run new-resource\x1b[0m inside ' +
        'the project directory to create new resource\n' +
        '\x1b[36m>\x1b[0m ' +
        'Use \x1b[34mnpm run build\x1b[0m inside ' +
        'the project directory to build code');
};
function newProject(rootDirectory, targetDirectory, options, promptResults) {
    return __awaiter(this, void 0, void 0, function* () {
        yield downloadBoilerplate(targetDirectory, options.branch);
        [
            updatePackageJson,
            setFeatures,
            execInit,
            showSuccessMessage,
        ].forEach(fun => fun(targetDirectory, promptResults));
    });
}
exports.newProject = newProject;
function newProjectEntrypoint(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = parseOptions(args);
        if (options.help) {
            printHelp();
            typescript_1.default.sys.exit(0);
        }
        const rootDirectory = path.resolve('.');
        const promptResults = yield promptData();
        const { directory: targetDirectory } = getEnvironmentData(rootDirectory, promptResults);
        yield promptAfterValidation({
            warnDirectoryIsNotEmpty: !validateDirectory(targetDirectory),
        }, targetDirectory);
        yield newProject(rootDirectory, targetDirectory, options, promptResults);
    });
}
exports.newProjectEntrypoint = newProjectEntrypoint;
//# sourceMappingURL=newProject.js.map