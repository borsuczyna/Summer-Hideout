"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newResourceEntrypoint = exports.newResource = void 0;
const enquirer_1 = __importDefault(require("enquirer"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const typescript_1 = __importDefault(require("typescript"));
const JSON5 = __importStar(require("json5"));
function parseOptions(args) {
    const options = {
        branch: 'master',
        help: false,
    };
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if (arg === '--help' || arg === '?' || arg === '-h') {
            options.help = true;
            break;
        }
        console.error(`Unexpected argument: ${arg}.\n` +
            `Use \x1b[34m--help \x1b[0mto get available arguments`);
        typescript_1.default.sys.exit(1);
    }
    return options;
}
function printHelp() {
    console.log('\x1b[0mUsage: \x1b[35mmtasa-lua-utils \x1b[1mnew-resource ' +
        '\x1b[0m[\x1b[34m--help\x1b[0m]\n' +
        '\x1b[0m\n' +
        'Use this command inside a project ' +
        '(directory with \x1b[34mmtasa-meta.yml\x1b[0m)\n' +
        'To create a new resource\n');
}
function validateDirectory(directory) {
    return (fs
        .readdirSync(directory)
        .filter(dir => dir.indexOf('mtasa-meta.yml') !== -1 ||
        dir.indexOf('tsconfig.json') !== -1).length >= 2);
}
function promptData() {
    const context = {
        projectName: '',
    };
    return enquirer_1.default.prompt([
        {
            type: 'input',
            name: 'resourceName',
            message: 'Enter the resource name:',
            result(value) {
                context.projectName = value;
                return value;
            },
        },
    ]);
}
function createNewResourceEnvironment(rootDirectory, options) {
    var _a;
    const tsconfig = JSON5.parse(fs.readFileSync(path.join(rootDirectory, 'tsconfig.json'), 'utf8'));
    const srcDirectory = path.join(rootDirectory, (_a = tsconfig.compilerOptions.rootDir) !== null && _a !== void 0 ? _a : '.');
    const resourceDirectory = path.join(srcDirectory, options.resourceName);
    fs.mkdirSync(resourceDirectory, {
        recursive: true,
    });
    fs.writeFileSync(path.join(resourceDirectory, 'server.ts'), '/** @noSelfInFile */\n\n' +
        "import { mtasa } from 'mtasa-lua-types/server'", 'utf8');
    fs.writeFileSync(path.join(resourceDirectory, 'client.ts'), '/** @noSelfInFile */\n\n' +
        "import { mtasa } from 'mtasa-lua-types/client'", 'utf8');
    fs.writeFileSync(path.join(resourceDirectory, 'utils.ts'), '', 'utf8');
}
function appendNewResourceToMeta(rootDirectory, options) {
    const mtasaMetaPath = path.join(rootDirectory, 'mtasa-meta.yml');
    const splitter = '\n---\n';
    const content = fs.readFileSync(mtasaMetaPath, 'utf8').trim();
    const isEmpty = content === '';
    fs.appendFileSync(mtasaMetaPath, `${isEmpty ? '' : splitter}
info:
    name: ${options.resourceName}
    type: script

compilerConfig:
    srcDir: ${options.resourceName}

scripts:
    - src: client.ts
      type: client
      cache: false

    - src: server.ts
      type: server

    - src: utils.ts
      type: shared
      cache: false
`, 'utf8');
}
function newResource(rootDirectory, promptResults) {
    return __awaiter(this, void 0, void 0, function* () {
        createNewResourceEnvironment(rootDirectory, promptResults);
        appendNewResourceToMeta(rootDirectory, promptResults);
    });
}
exports.newResource = newResource;
function newResourceEntrypoint(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = parseOptions(args);
        if (options.help) {
            printHelp();
            typescript_1.default.sys.exit(0);
        }
        const rootDirectory = path.resolve('.');
        if (!validateDirectory(rootDirectory)) {
            console.error('Execute this command in the directory with your project\n' +
                'It should contains mtasa-meta.yml and tsconfig.json file.');
            typescript_1.default.sys.exit(1);
        }
        const promptResults = yield promptData();
        yield newResource(rootDirectory, promptResults);
    });
}
exports.newResourceEntrypoint = newResourceEntrypoint;
//# sourceMappingURL=newResource.js.map