#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const newProject_1 = require("./cli/newProject");
const build_1 = require("./cli/build");
const information_1 = require("./cli/information");
const newResource_1 = require("./cli/newResource");
const HELP_MESSAGE = `mtasa-lua-utils version: ${(0, information_1.getVersion)()}\n` +
    '\x1b[0m\n' +
    'Usage: \x1b[35mmtasa-lua-utils \x1b[1m<command>\x1b[0m\n' +
    '\x1b[0m\n' +
    'Available commands:' +
    '\x1b[0m\n' +
    '    \x1b[34mnew-project    \x1b[0mInitialize MTASA TypeScript Boilerplate' +
    '\x1b[0m\n' +
    '    \x1b[34mnew-resource   \x1b[0mCreate new resource inside MTASA TypeScript Project' +
    '\x1b[0m\n' +
    '    \x1b[34mbuild          \x1b[0mBuild TypeScript Resource' +
    '\x1b[0m\n' +
    '\x1b[0m\n' +
    'Example command, to get more specific help:\n' +
    '\x1b[35mmtasa-lua-utils \x1b[1mbuild \x1b[34m--help\x1b[0m';
const ERROR_MESSAGE = '\x1b[31mUnexpected argument.\x1b[0m Use command below to get information:\n' +
    '\x1b[34mmtasa-lua-utils --help\x1b[0m';
function parseAndExecuteArguments() {
    if (typescript_1.default.sys.args.length === 0) {
        console.error(ERROR_MESSAGE);
        typescript_1.default.sys.exit(1);
    }
    if (typescript_1.default.sys.args[0] === 'new-project') {
        (0, newProject_1.newProjectEntrypoint)(typescript_1.default.sys.args.slice(1))
            .then(() => null)
            .catch(err => {
            console.error(err);
        });
        return;
    }
    if (typescript_1.default.sys.args[0] === 'new-resource') {
        (0, newResource_1.newResourceEntrypoint)(typescript_1.default.sys.args.slice(1))
            .then(() => console.log('\x1b[32mNew TypeScript resource has been set up successfully\x1b[0m'))
            .catch(err => {
            console.error(err);
        });
        return;
    }
    if (typescript_1.default.sys.args[0] === 'build') {
        (0, build_1.buildProject)(typescript_1.default.sys.args.slice(1));
        return;
    }
    if (typescript_1.default.sys.args[0] === '--help' ||
        typescript_1.default.sys.args[0] === '?' ||
        typescript_1.default.sys.args[0] === '-h') {
        console.error(HELP_MESSAGE);
        return;
    }
    console.error(ERROR_MESSAGE);
    typescript_1.default.sys.exit(1);
}
parseAndExecuteArguments();
//# sourceMappingURL=cli.js.map